Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №5
З дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ ТА СТВОРЕННЯ І ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ПРОГРАМНОГО ЗАСТОСУНКУ МОБІЛЬНОГО ПРИСТРОЮ ДЛЯ ПРОГРАМНОЇ СИСТЕМИ»





Виконавець:		
ст. гр. ПЗПІ-22-2						                 Несміянова О.О.

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	


                                                                                                       




Харків 2025
1 ЗАВДАННЯ
     
     Мета лабораторної роботи полягає в розробці повнофункціонального мобільного застосунку на Kotlin для Android, який реплікує функціональність веб-системи відстеження успішності студентів з інтеграцією IoT-пристроїв через протокол MQTT.
     
2 ОПИС ВИКОНАНОЇ РОБОТИ

     У межах лабораторної роботи було розроблено мобільний застосунок для платформи Android мовою Kotlin з використанням Jetpack Compose. Застосунок призначений для відстеження успішності студентів та реалізує функціональність авторизації, перегляду оцінок, розкладу занять, профілю користувача, а також моніторингу даних від IoT-пристроїв у реальному часі.
     Було використано архітектуру MVVM для зручності підтримки та масштабування коду. Для автентифікації користувачів інтегровано Firebase Authentication, для роботи з API — Retrofit, а для локального зберігання даних — Room. Зв’язок із IoT-пристроями реалізовано через MQTT-протокол із підтримкою тем реального часу (наприклад, sensors/temperature/{room_id}).
     Інтерфейс побудовано за принципами Material Design 3 з підтримкою темної/світлої тем, багатомовності (українська/англійська) та адаптивності до різних розмірів екранів. Отримано стабільний застосунок, що синхронізується з сервером і підтримує інтерактивний IoT-моніторинг аудиторій.
3 ХІД РОБОТИ

     Виконання лабораторної роботи розпочалося з детального аналізу функціональних вимог до мобільного застосунку для відстеження успішності студентів. Основною метою було забезпечити підтримку таких функцій, як авторизація, перегляд оцінок, розклад занять, доступ до профілю користувача, а також моніторинг аудиторій із підключенням IoT-пристроїв у режимі реального часу. В результаті було виокремлено основні категорії користувачів — студентів, викладачів та адміністративний персонал — і змодельовано сценарії їх взаємодії із системою.
     На цьому етапі була побудована UML діаграма прецедентів (Use Case Diagram), яка візуалізує ключові функціональні можливості додатку з точки зору кінцевих користувачів.
     
     

     
     Після визначення вимог було здійснено проєктування архітектури застосунку. Для забезпечення зручності розширення, підтримки та тестування було обрано архітектурний підхід MVVM (Model–View–ViewModel). Було виокремлено три основні рівні: презентаційний (екрани, ViewModel), доменний (use-case логіка, інтерфейси репозиторіїв) та рівень даних (локальні та віддалені джерела інформації). Для візуального представлення внутрішньої структури застосунку побудовано UML діаграму компонент (Component Diagram), що ілюструє взаємозв’язок між модулями застосунку.
     

     
     Особливу увагу було приділено структурі даних. Оскільки застосунок має працювати як з локальними даними (через Room Database), так і з віддаленими API (через Retrofit), була розроблена ER-модель (Entity–Relationship Model), яка охоплює сутності, що зберігаються на пристрої, та відображає логіку зв’язків між ними — такі як студенти, предмети, оцінки, розклад, аудиторії та IoT-пристрої.

      
     
     Після цього була здійснена структуризація коду застосунку у вигляді логічних пакетів (модулів) згідно з призначенням. Створено окремі пакети для авторизації, оцінок, профілю, розкладу, IoT-моніторингу та головної навігації. Кожен пакет містить власні ViewModel, UI-компоненти, репозиторії, сервісні класи тощо. Для ілюстрації цієї організації побудована UML діаграма пакетів (Package Diagram).

      
     Щоб забезпечити коректну логіку обміну даними між компонентами застосунку (наприклад, як дані з MQTT потрапляють до UI), було проєктовано UML діаграму взаємодії (Interaction Overview Diagram), яка демонструє механізм обробки повідомлень від IoT-сенсорів, оновлення бази даних та інтерфейсу користувача.

      
     Після завершення проєктування було реалізовано основний функціонал застосунку, використовуючи сучасні Android-технології: Jetpack Compose для побудови UI, Firebase Authentication для авторизації, Retrofit для REST-запитів, Room для локального збереження, MQTT (Paho) для IoT-комунікації та Hilt для впровадження залежностей. Усі основні екрани застосунку були реалізовані відповідно до концепції Material Design 3 з підтримкою темної теми, багатомовності (українська та англійська) та адаптивності інтерфейсу під різні пристрої.
     На завершальному етапі застосунок був протестований як на рівні юніт-тестів, так і шляхом функціонального тестування інтерфейсу, після чого проведено компіляцію та збірку готового APK-файлу для розгортання.
     

ВИСНОВОК 

     У ході виконання лабораторної роботи було успішно реалізовано мобільний застосунок для платформи Android, що повністю відтворює функціональність веб-системи відстеження успішності студентів з інтеграцією IoT-технологій. Завдяки використанню сучасного підходу до архітектури (MVVM), застосунок вийшов структурованим, масштабованим і зручним у підтримці. Було впроваджено повний цикл взаємодії з користувачем — від авторизації до перегляду даних у режимі реального часу, включаючи роботу з локальною базою даних та віддаленим API.
     Інтеграція з MQTT-протоколом дозволила реалізувати моніторинг стану аудиторій та сенсорів у реальному часі, що демонструє можливість ефективного використання IoT у навчальному процесі. Окрему увагу приділено побудові зручного інтерфейсу з використанням Jetpack Compose, підтримкою багатомовності та адаптації до різних розмірів екранів.
     Таким чином, у результаті лабораторної роботи були поглиблені практичні навички розробки сучасних мобільних застосунків, взаємодії з хмарними сервісами, базами даних та IoT-пристроями, а також набуті знання щодо проєктування програмного забезпечення з використанням UML-діаграм і патернів архітектури.
     
     
