 Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії






Звіт
З дисципліни «Архітектура програмного забезпечення»
З лабораторної роботи No2
На тему: «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ»



Виконала 
студентка групи ПЗПІ-22-2 
Несміянова Ольга Олександрівна
28 квітня 2025 р.
Перевірив
Старший викладач кафедри ПІ
Сокорчук Ігор Петрович 






Харків 2025
      
Назва проекту: Програмна система для контролю за успішністю студентів коледжу
     1 МЕТА РОБОТИ
     Метою лабораторної роботи є розробка серверної частини програмної системи для контролю за успішністю студентів коледжу, що включає проєктування архітектури, створення UML-діаграм прецедентів та ER-діаграм бази даних, реалізацію бази даних і ORM-моделей, розробку REST API з підтримкою аутентифікації, а також перевірку функціональності створеного програмного забезпечення.
     
     2 ХІД РОБОТИ
     У ході роботи було спроєктовано архітектуру програмної системи для контролю за успішністю студентів коледжу, створено UML-діаграму прецедентів для демонстрації основних сценаріїв використання (рис 1.1) та ER-діаграму, що відображає логічну структуру бази даних і взаємозв’язки між сутностями — студентами, викладачами, групами, предметами та оцінками (рис 1.2). 

Рис 1.1 – UML діаграма

Рисунок 1.2 - ER-діаграма даних
      
     Створено діаграму структури бази даних, яка деталізує поля кожної таблиці та їх зв’язки, реалізовано схеми моделей у MongoDB за допомогою Mongoose.

Рис 1.3 - Діаграма структури бази даних

     У ході виконання лабораторної роботи було створено UML-діаграму взаємодії для відображення послідовності обміну повідомленнями між об’єктами в процесі обробки запитів (рис 1.4). 

Рис 1.4 - UML діаграма взаємодії (Interaction Overview Diagram)

     Створено контролери для CRUD-операцій над кожною сутністю, розроблено REST API, організовано маршрутизацію та додано аутентифікацію з використанням JWT і хешування паролів через bcrypt, реалізовано middleware для захисту маршрутів, виконано тестування API за допомогою curl та Postman, і на завершення увесь написаний програмний код було збережено та оновлено у GitHub-репозиторії в гілці main.
Специфікація розробленого API 
POST /api/auth/login
Отримання JWT токена
Запит:
{
  "email": "string",
  "password": "string"
}
Відповідь (200 OK):
{
  "token": "string",
  "user": {
    "id": "string",
    "email": "string",
    "fullName": "string",
    "role": "string"
  }
}

POST /api/auth/register
Реєстрація користувача (тільки для адміністраторів)
Запит:
{
  "email": "string",
  "password": "string",
  "fullName": "string",
  "role": "student | teacher | admin",
  "groupId": "string" // обов'язковий для студентів
}
Можливі відповіді:
• 201 Created: користувач створений
• 400 Bad Request: помилка валідації (наприклад, неправильний groupId)

Студенти

GET /api/students
Отримання списку студентів
Відповідь (200 OK):
{
  "students": [
    {
      "id": "string",
      "fullName": "string",
      "email": "string",
      "group": {
        "id": "string",
        "name": "string"
      }
    }
  ],
  "total": 1,
  "page": 1,
  "pages": 1
}

GET /api/students/:id
Деталі конкретного студента
Відповідь (200 OK):
{
  "id": "string",
  "fullName": "string",
  "email": "string",
  "group": {
    "id": "string",
    "name": "string"
  },
  "grades": [
    {
      "id": "string",
      "subject": {
        "id": "string",
        "title": "string"
      },
      "gradeValue": 95,
      "date": "2025-05-12"
    }
  ]
}

Викладачі
GET /api/teachers
Отримання списку викладачів
Відповідь (200 OK):
{
  "teachers": [
    {
      "id": "string",
      "fullName": "string",
      "email": "string",
      "subjects": [
        {
          "id": "string",
          "title": "string"
        }
      ]
    }
  ],
  "total": 1,
  "page": 1,
  "pages": 1
}


GET /api/subjects
Отримання списку предметів
Оцінки
POST /api/grades
Додавання оцінки студенту
Запит:
{
  "studentId": "string",
  "subjectId": "string",
  "gradeValue": 100,
  "date": "2025-05-12"
}

GET /api/grades
Отримання оцінок

Групи
POST /api/groups
Запит:
{
  "name": "string",
  "students": ["string"]
}

GET /api/groups
Отримання списку груп
Формат відповіді для списків
{
  "data": [],
  "total": 1,
  "page": 1,
  "pages": 1
}


Безпека
• Використовується JWT:
Authorization: Bearer <token>
• Паролі хешуються через bcrypt
• Атаки запобігаються через rate limiting
• Усі запити повинні виконуватись через HTTPS
     

3 ВИСНОВОК
     У ході лабораторної роботи було створено RESTful API для системи контролю успішності студентів з використанням Node.js, Express та MongoDB; реалізовано маршрути для роботи з користувачами, студентами, викладачами, групами, предметами та оцінками; забезпечено JWT-аутентифікацію, валідацію даних, обробку помилок, а також розроблено та протестовано документацію API за допомогою Swagger — усі поставлені завдання були виконані успішно.


