Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №3
З дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА ВЕБКЛІЄНТА СИСТЕМИ»

Виконавець:		
ст. гр. ПЗПІ-22-2						                    Несміянова О.О.

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	


                                                                                                       









Харків 2025

1 ЗАВДАННЯ

     Розробити функціональну систему контролю успішності студентів з чітким розподілом прав доступу між ролями користувачів, реалізацією базових CRUD-операцій, а також можливістю взаємодії з даними про оцінки, предмети, студентів і викладачів через вебінтерфейс.
     
2 ОПИС ВИКОНАНОЇ РОБОТИ

     У ході виконання роботи було розроблено клієнтську частину вебдодатку для системи контролю успішності студентів. Для реалізації інтерфейсу користувача було обрано бібліотеку React, що забезпечує гнучке створення компонентів, ефективну роботу з даними та сучасний підхід до розробки односторінкових додатків (SPA).
     Основною метою клієнтської частини є забезпечення доступу користувачів різних ролей (студентів, викладачів та адміністраторів) до функціональних можливостей системи відповідно до їхніх повноважень. Система має чітку структурну організацію інтерфейсу, розроблену з урахуванням принципів зручності, доступності та інтуїтивної зрозумілості.
     Вебдодаток реалізовано як односторінковий застосунок (SPA), що взаємодіє з серверною частиною через REST API. Основні технології, використані під час розробки:
     • React — бібліотека для побудови інтерфейсу;
     • React Router — для маршрутизації між сторінками;
     • Axios — для надсилання HTTP-запитів до API;
     • Material UI (MUI) — для реалізації адаптивного дизайну;
     • TypeScript — для типізації та підвищення надійності коду;
     • Контекст авторизації (React Context) — для зберігання сесії користувача.
     Кожен користувач, залежно від своєї ролі, отримує доступ до відповідного функціоналу:
     • Студенти можуть переглядати свої оцінки та загальну успішність.
     • Викладачі можуть виставляти оцінки та переглядати інформацію про студентів і предмети.
     • Адміністратори мають повний контроль над даними, включаючи створення, редагування та видалення студентів, викладачів, предметів тощо.
     Для покращення розуміння функціональної структури та логіки взаємодії між компонентами клієнтської частини було створено набір UML-діаграм.
     2.1 UML-діаграма прецедентів (Use Case Diagram)

      
     Ця діаграма ілюструє основні взаємодії користувачів з системою. Вона показує, які функції доступні для кожної ролі: перегляд оцінок, створення предметів, редагування даних користувачів тощо.
     
     2.2 UML-діаграма взаємодії (Interaction Overview Diagram)

     Рисунок 2.2 – UML-діаграма взаємодії

     Діаграма описує логіку взаємодії між компонентами клієнтської частини та серверним API. Наприклад, процес авторизації включає надсилання запиту, отримання токена та його збереження в localStorage.
     2.3 UML-діаграма діяльності (Activity Diagram)

     Рисунок 2.3 – UML-діаграма діяльності

     Ця діаграма демонструє алгоритм дій користувача при вході в систему та доступу до відповідного функціоналу. Вона також ілюструє умови переходу між станами (успішна авторизація / помилка тощо).

     2.4 UML-діаграма пакетів (Package Diagram)

     Рисунок 2.4 – UML-діаграма пакетів
     Діаграма пакетів відображає модульну структуру клієнтської частини проєкту: розподіл на модулі API, компоненти, сторінки, контексти, типи даних тощо.

Розроблено такі основні сторінки та компоненти:
     • Login.tsx — сторінка авторизації з вибором ролі (студент, викладач, адміністратор);
     • StudentDashboard.tsx — інтерфейс перегляду оцінок студентом;
     • TeacherDashboard.tsx — сторінка для виставлення та перегляду оцінок;
     • AdminPanel.tsx — сторінка для управління всіма користувачами та предметами;
     • AuthContext.tsx — централізоване зберігання токена та інформації про користувача;
     • API.ts — окремий файл для взаємодії з REST API.
     Особливу увагу приділено забезпеченню контролю доступу, завдяки чому кожна роль має доступ лише до свого функціоналу. Для захисту сторінок використано приватні маршрути (protected routes), які перевіряють авторизаційний токен.
     Після успішного входу до системи, користувач отримує токен авторизації, який зберігається в localStorage. Axios-перехоплювачі автоматично додають токен до кожного запиту. Це забезпечує безперервну сесію між перезавантаженнями сторінки та дозволяє безпечно звертатися до захищених маршрутів.
     
     
ВИСНОВКИ

     У результаті виконаної роботи створено функціональну клієнтську частину вебзастосунку для контролю успішності студентів. Система має зручний інтерфейс, адаптивну верстку та гнучку архітектуру, що дозволяє масштабувати проєкт у майбутньому. Реалізовано автентифікацію, маршрутизацію, управління станом користувача та базові CRUD-операції.








      
